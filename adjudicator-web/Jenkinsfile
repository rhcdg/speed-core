@Library('td-shared-lib') _

if (env.CHANGE_ID) {
    //if it's a PR run the pr pipeline
    pr([
            agentLabel: 'nodejs12',
            setup: {
                sh 'cd ops && ./pipeline.sh'
                sh "npm ci"
            },
            buildCommand: {
                sh "npm run build:ci -- --prod"
            },
            unitTestCommand: {
                try {
                    sh "npm run-script test:ci"
                } finally {
                    junit testResults: 'junit.xml', allowEmptyResults: true
                    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage/cobertura-coverage.xml', conditionalCoverageTargets: '90, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '90, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '90, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
                }
            },
            owaspCommand: {
                try {
                    sh "cp ops/owasp/index.js node_modules/owasp-dependency-check/"
                    sh "cp ops/owasp/dependency-check.js node_modules/owasp-dependency-check/lib/"
                    sh "npm run owasp"
                } finally {
                    publishHTML([
                            allowMissing         : false,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : 'dependency-check-reports',
                            reportFiles          : 'dependency-check-report.html',
                            reportName           : 'OWASP Dependency Check Report'
                    ])
                }
            },
            integrationTestCommand: {
                sh "echo 'Running Integration Tests'"
            },
            sonarScanCommand: 'export JAVA_TOOL_OPTIONS="-XX:+UnlockExperimentalVMOptions"; npm install -g sonarqube-scanner; npm install; sonar-scanner -Dsonar.junit.reportPaths=junit.xml -Dsonar.zaproxy.reportPath=reports/zap.xml -Dsonar.zaproxy.htmlReportPath=reports/zap.html',
            svc: 'adjudicator-web',
            project: 'speed',
    ])
} else if ('develop'.equals(env.BRANCH_NAME)) {
    //if develop branch, run the develop pipeline
    develop([svc: 'adjudicator-web', project: 'speed'])
} else if ('hotfix'.equals(env.BRANCH_NAME)) {
    //if hotfix branch, run the hotfix pipeline
    develop([svc: 'adjudicator-web', project: 'speed'])
} else if (!'release'.equals(env.BRANCH_NAME)) {
    //any branch other than release, just run basic developer tests
    branch([
            agentLabel: 'nodejs12',
            setup: {
                sh 'cd ops && ./pipeline.sh'
                sh "npm ci"
            },
            buildCommand: {
                sh "npm run build:ci -- --prod"
            },
            unitTestCommand: {
                try {
                    sh "npm run-script test:ci"
                } finally {
                    junit testResults: 'junit.xml', allowEmptyResults: true
                    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage/cobertura-coverage.xml', conditionalCoverageTargets: '90, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '90, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '90, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
                }
            },
            owaspCommand: {
                try {
                    sh "cp ops/owasp/index.js node_modules/owasp-dependency-check/"
                    sh "cp ops/owasp/dependency-check.js node_modules/owasp-dependency-check/lib/"
                    sh "npm run owasp"
                } finally {
                    publishHTML([
                            allowMissing         : false,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : 'dependency-check-reports',
                            reportFiles          : 'dependency-check-report.html',
                            reportName           : 'OWASP Dependency Check Report'
                    ])
                }
            },
            sonarScanCommand: 'export JAVA_TOOL_OPTIONS="-XX:+UnlockExperimentalVMOptions"; npm install -g sonarqube-scanner; npm install; sonar-scanner -Dsonar.junit.reportPaths=junit.xml'
    ])
}
